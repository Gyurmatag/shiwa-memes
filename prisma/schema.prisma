datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String    @id @default(cuid())
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  stripeCustomerId        String?   @unique
  stripeSubId             String?
  currentSubPlan          String?
  name                    String?
  email                   String?   @unique
  emailVerified           DateTime?
  image                   String?
  accounts                Account[]
  sessions                Session[]
  memes                   Meme[]
  likes                   Like[]
  comments                Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Meme {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  title     String
  imgUrl    String
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  likes     Like[]
  comments  Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message   String
  memeId    String
  userId    String
  meme      Meme     @relation(fields: [memeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  memeId    String
  userId    String
  meme      Meme     @relation(fields: [memeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}
